1. 노드와 링크

    노드 : 라우터, 서버, 스위치 등의 네트워크 장치
    링크 : 유선 또는 무선

2. 처리량(throughput)

    링크를 통해 전달되는, 단위 시간당 데이터량. 단위는 주로 bps(bit per second)

3. 대역폭

    주어진 시간동안 네트워크 연결을 통해 흐를수 있는 최대 비트 수(데이터 수)
    
4. 지연시간

    요청이 처리되는 시간, 즉, 어떤 메시지를 보내면 두 장치를 "왕복하는데 걸리는 시간"

5. 패킷

    pack 과 bucket 의 합성어로
    컴퓨터 간의 데이터를 주고 받을때의 데이터 조각으로, "특정 형식에 맞춰진 가공된 데이터"

6. FTP

    장치와 장치간의 파일 전송을 위한 표준 통신 프로토콜

7. SSH

    보안되지 않은 네트워크 에서 네트워크 서비스를 안전하게 운영하기 위한 "암호화 네트워크 프로토콜"

8. HTTP

    월드 와이드 웹(www) 을 위한, 통신의 기초이자, 웹사이트를 이용하는데 사용하는 프로토콜

9. SMTP

    전자 메일 전송을 위한 프로토콜

10. DNS

    "도메인"이름과 "IP 주소" 를 서로 맵핑해주는 서버
    즉, 도메인이름을 머신이 읽을 수 있는 IP 주소로 변경해주는 시스템.

        예시)
            www.naver.com   ==> DNS 쿼리(요청) ==> 일련의 과정을 거쳐, 완벽한 IP 주소를 맵핑

    중요한 점은, www.naver.com 의 "IP 주소가 변경되어도", DNS 는, 완벽한 IP 주소를 맵핑해 준다는 것이다
    IP 주소가 변경되어도, 같은 도메인 이름을 사용 할 수 있는것은 DNS 덕분이다.


11. TCP

    "가상 회선 패킷 교환 방식"을 사용하는 포로토콜
    => "패킷 사이의 순서를 보장" 하는 프로토콜
    연결 지향 프로토콜을 사용하여, "신뢰성을 구축" 하여, 수신 여부를 확인하는 프로토콜
    초기 데이터 통신을 위한 "신뢰성의 구축"에는 "3WAY hand-shake" 작업을 진행한다.
    연결 해제를 위한 과정에는 "4WAY hand-shake" 작업을 진행한다.

    * 가상회선 패킷 교환 방식

        : 각 패킷의 "가상회선 식별자" 가 포함되어, 패킷들이 전송된 순서대로 도착하는 방식


12. UDP

    "데이터 그램 패킷 교환 방식"을 사용하는 프로토콜
    => 패킷의 순서를 보장하지 않고, 단순 데이터만 주는 프로토콜
    "신뢰성이 구축되지 않은 프로토콜"

    * 데이터그램 패킷 교환 방식

        패킷이 독립적으로 이동, 최적의 경로를 선택하여 가는 교환 방식. 데이터 경로도, 순서도 다를 수 있다.


13. 3Way hand-shake 작업

    클라이언트와 서버가 통신할때의 단계
    
    1) SYN 단계 (연결 요청 = Syncronization)
        클라이언트는 서버에, "클라이언트의 ISN" 을 담아, "SYN 을 보낸다."
        ISN 은 "새로운 TCP 연결"의 첫번째 패킷에 할당된 임의의 시퀀스 번호( = 첫 연결시 보내는 패킷 머리의 번호)

            * ISN : 이니셜 시퀀스 넘버

    2) SYN + ACK 단계 (응답 = ACKnowledgement)

        서버는 클라이언트의 SYN 을 수신하고, 서버의 ISN을 보낸다.
        승인번호로 "클라이언트ISN +1 "을 하여 보낸다.

    3) ACK 단계

        클라이언트는 서버의 ISN +1 한 승인번호를 담아, ACK 를 서버에 보낸다.


    ==> 이후, 신뢰성이 구축되면, 데이터 전송을 시작한다.


14. 4WAY hand-shake 과정

    1) 클라이언트가 연결을 닫으려 "FIN 으로 설정된 세그먼트를 서버로 보냄"
        이후, 클라이언트는 "FIN_WAIT_1" 상태에 진입

    2) 서버는 클라이언트로 "ACK 라는 승인 세그먼트를 보낸다".
        이후, 서버너는 "FIN_WAIT_2" 상태에 진입한다.

    3) 서버는 ACK 를 보낸 후, "일정 시간이 지난 후, FIN 이라는 세그먼트를 보낸다".

    4) 클라이언트는 "TIME_WAIT 상태가 되고, 다시 서버로 ACK 를 보낸다."
        서버는 CLOSE 상태가 된다.
        이후, 클라이언트는 어느정도의 대기시간 이후, 연결이 닫히고, 모든 자원의 연결이 해제된다.

    * TIME_WAIT 상태
        : 소켓이 바로 소멸되지 않고, 지연 패킷 등의 문제점을 해결하는데 쓰이는, 대기시간
        닫히고 들어오는 패킷을 수용하기 위한 대기시간이다.

15. 전 이중화 통신 ( Full duplex)

    양쪽 장치가 동시에 송신과 수신을 할 수 있는 방식
    현대의 고속 이더넷

16. 방 이중화 통신 (half duplex)

    양쪽 장치는 서로 통신이 가능하지만, 동시에 통신 할 수는 없는 방식
    장치가 "수신을 시작"하면, 응다하려 할 경우, "전송이 완료 된 이후에 가능한" 방식