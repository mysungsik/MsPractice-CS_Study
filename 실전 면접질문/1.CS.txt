[인덱스] ====================================================================================================================
1. DNS (Domain NAme System Servers)
2. www.google.com 을 입력하면 어떤 일이 일어나는가?
3. 브라우저 렌더링의 원리
4. MVC 모델
5. MVVM 모델
6. CSR과 SSR의 차이점은 무엇인가요?




[ 메인] ====================================================================================================================

1. DNS (Domain NAme System Servers)
    도메인의 이름과 IP 주소를 저장하고 있는 서버
    도메인 이름이 들어오면, IP 주소를 맵핑하여 보내준다.

2. www.google.com 을 입력하면 어떤 일이 일어나는가?

    브라우저가 HTTP 를 사용하여, DNS 로 도메인 주소를 요청

    DNS는 도메인 네임을 DNS 서버에서 검색, 해당 되는 IP 맵핑, 응답

    브라우저는 HTTP 요청을 생성, 해당 IP 주소의 컴퓨터로 전송

    전송은 TCP 프로토콜을 사용하여, 해당 IP 주소의 컴퓨터로 전송된다.

    도착한 HTTP 메시지는, HTTP 프로토콜을 사용하여, 웹페이지의 URL 정보로 변환

    웹서버는 해당 URL 을 이용하여, 웹페이지 데이터 검색

    검색된 웹 페이지는 다시 HTTP 프로토콜을 사용하여, HTTP 응답 메시지를 생성

    HTTP 응답 메시지는 TCP 프로토콜을 사용하여, 원래 컴퓨터로 전달

    도착한 HTTP 응답 메시지는 다시, HTTP 프로토콜을이용하여 웹페이지 데이터로 변환

    웹브라우저에 의해 출력


3. 브라우저 렌더링의 원리

    서버로부터 받은 HTML 문서를

    렌더링 엔진의 HTML 파서와 CSS 파서에 의해 파싱 된다. ( Parsing )

    파싱된 문서는 DOM, CSSOM 의 각각의 트리로 변환되고, 렌더링 트리로 결합한다. ( Style )

    렌더링 트리 에서 각 노드의 위치와 크기를 계산한다 (Layout)

    계산된 값을 이용해, 각 노드를 화면상 픽셀로 변환하고, 레이어를 만든다. ( Paint )

    생성된 렌더 트리를 기반으로, 웹페이지를 렌더한다. ( Composite )

4. MVC 모델

    모델, 뷰, 컨트롤러 로 구성되어 있는 프로그래밍 디자인

    모델은 데이터와 데이터의 처리
    뷰 는 사용자들에게 보여지는 UI의 집합
    컨트롤러는 모델과 뷰를 이어주는 로직이자, 사용자의 입력을 받고 처리하는 부분이다.

    액션이 컨트롤러에 들어가면, 컨트롤러는 모델을 업데이트한다.
    뷰는 모델을 이용해, 화면을 업데이트한다.

    장점으로는 구조적으로 나뉘어 있어, 체계적으로 개발을 진행 할 수 있고,
    파트가 나뉘어있어, 재사용, 확장에 유리합니다.

    (다만, 뷰와 모델 사이의 의존성이 높아, 애플리케이션이 복잡해짐에 따라, 유지보수가 복잡해짐)

    대표적인 라이브러리로 REACT가 있습니다

5. MVVM 모델

    모델, 뷰, 뷰모델 로 구성되어있는 MVC 패턴의 파생 패턴으로

    뷰모델은, 뷰를 표현하기 위한 뷰를 위한 모델이자, 뷰를 나타내기 위한 데이터처리를 하는 부분이다.

    뷰 모델은, 모델에 있는 "데이터의 상태"이다.
    뷰 모델은 뷰와 "바인딩" 되는 특징이 있다.

    액션이 "뷰를 통해", "커맨트 패턴" 으로 뷰모델에 전달되면, 뷰모델은 모델에게 데이터처리를 요청하고,
    모델은 요청받은 데이터를 뷰모델에 응답한다.

    바인딩된 뷰는 뷰모델에 의해, 화면이 업데이트 된다.

    대표적인 라이브러리로 VUE.js 가 있습니다.


6. CSR과 SSR의 차이점은 무엇인가요?

    1) CSR(클라이언트 사이드 렌더링)

        클라이언트인 브라우저가 렌더링을 처리하는 방식

        [CSR의 구동 시퀀스]
            1) 서버로 요청
            2) 서버는 "텅 빈 HTML" 을 응답
            3) 서버로 JS 요청
            4) 서버는 "구동하는 JS"(구동 프레임워크, 로직, 소스코드 등...) 를 응답
            5) 클라이언트가 클라이언트 사이드에서 렌더링 (TTI, TTV)
            5) 이때부터, 사용자는 사이트를 볼 수 있다.

            TTV(타입 투 뷰) 와 TTI (타입 투 인터렉트) 가 동시에 진행된다.
            그러므로 최적화를 위해, "초기에 어떤 필수적인 아이템들만 보내야 할지 잘 정하는 것이 좋다."

        [장점]
            사용자의 빠른 유저경험

        [단점]
            초기 다운로드시간이 걸린다.
            서버로부터 빈 HTML 을 받기 때문에 썩 좋지않은 SEO(검색엔진최적화)

        

    2) SSR (서버사이드 렌더링)

        서버측에서, HTML 을 렌더링 하여, 완성된 HTML 을 클라이언트에게 보내주는 방식
        서버에서 구동하는 프레임워크, 소스코드들을 사용하여, 잘 만들어진 HTML 파일을 만들어 클라이언트로 보내준다.
        서버는 클라이언트에게, 완성된 HTML 파일과 동적으로 제어가능한 약간의 소스코드를 보내준다.

        [SSR의 구동 시퀀스]
            1) 서버에 요청
            2) 서버에서 잘 만들어진 HTML(서버사이드 렌더링) 을 응답 (TTV) 이때부터 유저가 볼 수 있음
            3) 서버에 JS 요청
            4) 서버에서 JS 를 응답 (TTI) 이때부터, 사용자가 웹사이트를 사용 가능

            TTV가 TTI 가 동시에 되지 않는다.

            그러므로, 최적화를 위해, "TTV 와 TTI 의 단차를 최대한 줄이는 방향을 모색하는 것이 좋다."

        [장점]
            첫페이지 로딩이 빠르다.
            이미 만들어진 HTML 이기 때문에 SEO 가 좋다.

        [단점]
            새 요청에 의해 HTML 을 다시 받아오게된다면, 전체적인 웹사이트를 다시 받아오는 것이기 때문에,
                사용자 경험이 좋지 않고, 블링크 이슈가 발생할 수 있다.
            서버의 과부하가 발생할 수 있다.

    3) SSG (스태틱 사이드 제너레이트)

        완성된 HTML 을 서버에 저장,
        필요할때, JS 를 다운받는 방식
        
        둘의 장점을 결합시킬 수 있음


7. 브라우저 저장소의 종류와 차이점

    종류 : 쿠키, 웹스토리지(로컬, 세션)

    [전송]
        쿠키 : 모든 요청에 대해, 쿠키정보를 포함하여 서버로 전송한다.
            이는 불필요한 트래픽을 발생 시킬 수 있다.

        웹스토리지 : 데이터가 클라이언트단 저장만 되어있을뿐, 서버로 항시 전송되지 않는다. 자동전송의 위험성이 없다.

    [용량]
        쿠키 : 한개의 쿠키당 4kb 의 용량 제한이 있다.

        웹스토리지 : 제한이 없이 저장 할 수 있다.

    [지속성]
        쿠키 : 만료일자를 "설정하지 않으면 세션쿠키", "설정하면 지속적쿠키"로 간주된다.
            세션쿠키의 경우, "메모리에 저장"되어, 브라우저나 탭이 닫히면 삭제된다.
            지속적 쿠키의 경우, "디스크에 저장"되어, 임의로 삭제하거나, 만료일이 도래하기 전까지는 저장된다.

        웹스토리지 : 만료일자가 없다.


8. 웹스토리지의 공통점과 차이점

        도메인 별로, 로컬스토리지가 구성된다. a도메인의 스토리지는 b도메인에서 사용할 수 없다

    [데이터 유지]
        로컬 : 저장한 데이터를 지우지 않는 한, "영구 보관"된다. 
        세션 : 세션쿠키와 비슷한 성질을 갖는다. "브라우저가 열려있는 동안만 유지된다"

    [데이터 범위]
        로컬 : 도메인만 같다면, "모든 도메인에서 전역적으로 공유가 가능하다"
        세션 : 브라우저가 다르면, "다른 저장소를 생성한다" 크롬으로 켜면, 사파리로는 이용이 불가능하다.


9. HTTP 와 HTTPS 의 차이점

    HTTP는 응용 프로그램이, 데이터를 주고받기 위한 프로토콜입니다.
    HTTPS 는 HTTP에 암호화가 추가된 프로토콜입니다.
    공개키/개인키 암호화 방식을 이용하여, 데이터를 암화하며, 
    암호화 복호화 과정이 필요합니다.
    HTTPS 는 인증서를 발급받고, 유지하는데 추가 비용이 발생합니다.

10. OOP의 특징에 대해 설명하시오

    객체 지향 프로그래밍은, 컴퓨터 프로그래밍 패러다임중 하나로,
    프로그램을 상태와 행위가 합쳐진, 객체를 만들고, 객체들간의 유기적인 상호작용으로 로직을 구성하는 프로그래밍 방법입니다.

    작은 문제를 해결하는 독립적인 객체들을 조립하는 형식을 사용해,
    재사용성과 확장성에 용이합니다.

    단점은 처리속도가 느리고, 코드를 작성하는 시간이 조금 더 걸린다는 점입니다.

    OOP의 특징으로는, 캡슐화, 상속, 다형성, 등이 있습니다.

11. 캡슐화, 상속, 다형성

    캡슐화는 데이터와 메서드를 하나로 묶고, 실제 구현 내용 일부를 내부에 감추는 행위 입니다.
    접근 제한자(private 등...)  등을 이용하여 숨길 수 있습니다.

    상위 클래스의 특성을 하위클래스가 받아 재사용하거나, 추가, 확장 하는 것

    다형성은 오버라이딩과 오버로딩이 있습니다.
    
        오버라이딩은 다른 클래스에, 같은 이름의 메서드를 넣어, 동작의 목표는 같지만, 다른 방식으로 결과를 도출해 내는것인
        오버로딩은 같은 이름의 메서드지만, 다른 역할을 하게 만드는 방법입니다.
            주로 상속받은 하위 클래스에서, 메서드의 내용을 변경하고 사용할때 사용됩니다.

        예시)   
        (오버라이딩)
            저글링 클래스에, eat 이라는 메서드를 여러개 만든다. 대신, 다른 매개변수를 준비한다. eat(a), eat(a,b), eat(a,b,c)
            클래스.eat(a) // 클래스.eat(a,b) 를 사용할때 서로 다른 값을 도출된다..
    
            