[디자인패턴] =========================================================================================


1. 상속(extend)  와 구현(implement)

    "상속"은, 자식클래스가 부모클래스로 부터 메서드 등을 상속받아, 자식이 "사용 및 확장 할 수 있는 것"
        재사용성, 중복성이 최소화된다.

    "구현"은 부모의 인터페이스를 자식이 "재정의" 하여 사용하는 것

2. 프록시(Proxy)

    "프록시 객체"는 어떠한 대상의 동작(속성접근, 할당, 열거 등...) 작업을 "가로챌 수 있는 객체"

3. 캐시

    데이터나 값을 미리 복사해 놓는 "임시 저장소"

4. 버퍼

    데이터를 한곳에서, 다른 곳으로 전송하는 동안, 일시적으로 그 데이터를 보관하는 메모리의 영역

5. DDOS 공격 

    짧은 기간동안 네트워크에 많은 요청을 보내, 네트워크를 마비시키는 공격

6. 프록시 서버

    서버와 클라이언트 사이에, 자신(프록시서버)를 통해, 다른 네트워크 서비스에 "간접적으로 접근(대리해주는)"할 수 있게 만들어주는 서버

    즉, 프록시 서버는 클라이언트와 서버 사이에서 요청과 응답을 대신 처리해주게 됩니다.

    대부분, 서버의 앞단에 두어, 캐싱,로깅, 데이터분석을 먼저 처리하고, 이를 분석해 접근할수 있게, 혹은, 접근할 수 없게 포트번호를 변경하여
    해킹 공격을 차단하는 기능도 할 수 있습니다.

7. CDN (Connet Delivery Network)

    사용자가 인터넷에 접속하는 곳과 가까운 곳에, 컨텐츠를 캐싱, 배포 하는 서버 네트워크
    이를 통해, 사용자는 웹서버로부터 컨텐츠를 다운로드 하는 시간을 줄일 수 있다.

8. Origin

    "프로토콜", "호스트이름", "포트" 의 조합

    https://hims.com:12010
    프로토콜 [https]
    호트의름 [hims.com ] 
    포트 [ 12010 ]

9. CORS( Cross Origin Resource Sharing)

    웹서버가, 리소스를 로드할때, "다른 오리진을 통해 로드하지 못하게 하는 HTTP 기반 메커니즘"

    예시) 프론트엔드는 127.0.0.1:3000 의 서버로 실행중인데,
            백엔드는 127.0.0.1:12010 의 서버로 실행된다면, 포트번호가 달라서, CORS 오류가 발생한다.

8. 프록시를 사용한 CORS 에러 방지

    프론트 엔드 앞단에, "프록시 서버" 를 두어, 프론트엔드 서버에서 요청되는 오리진을 "백엔드의 오리진과 동일하게 만들어"
    CORS 에러를 방지한다.

10. 이터러블, 이터레이터 프로토콜

    매번 발생했던, 그 "순환 불가능합니다 오류" 의 주인공

    이터러블한 객체는 "순환 가능한 객체"
    이터레이터 프로토콜은, 이터러블한 객체를 순환할떄 사용하는 규칙

11. MVC 패턴의 모델, 뷰, 컨트롤러

    모델 : 애플리케이션의 "데이터베이스", "상수", "변수" 등의 데이터

    뷰 : 사용자의 인터페이스 요소

    컨트롤러 : 모델과 뷰를 잇는 "다리", "로직을 담당"한다.
                모델과 뷰의 "생명주기"를 다루며, 모델이나 뷰가 변경된다면, 각 구성요소에 그 내용을 알려준다.

12. MVVM 패턴의 "커맨드"

    커맨드 : 여러가지 요소에 대한 처리를, 하나의 액션 으로 처리해 줄 수 있는 기법

13. 데이터 바인딩

    화면에 보이는 "뷰 의 데이터"와 "웹 브라우저의 메모리" 를 일치시키는 기법
        데이터 바인딩 된 뷰모델을 변경하면 뷰가 변경된다.

[프로그래밍 패러다임] =========================================================================================

1. 추상화

    복잡한 시스템으로부터, 핵심적인 내용을 "간추려 내는것"

2. 캡슐화

    데이터와 메서드를 하나로 묶고, "실제 구현 내용일부를 내부에 감추"는 행위
    접근제한자(private 등...) 를 사용하여 숨길 수 있다

3. 상속성
    상위 클래스의 특성을 하위클래스가 받아 재사용하거나, 추가, 확장 하는 것

4. 다형성
    오버라이딩(재정의) : "클래스" 에, "같은 이름의 메서드" 를 집어넣어, 동작의 목표는 같지만, 다른 방식으로 결과를 도출해 내는 것 
    오버 로딩(확장) : 오버로딩은 같은 이름의 메서드지만, 다른 역할을 하게 만드는 방법입니다.
        주로 상속받은 하위 클래스에서, 메서드의 내용을 변경하고 사용할때 사용됩니다.

    예시)   
        (오버라이딩)
            저글링 클래스에, eat 이라는 메서드를 여러개 만든다. 대신, 다른 매개변수를 준비한다. eat(a), eat(a,b), eat(a,b,c)
            클래스.eat(a) // 클래스.eat(a,b) 를 사용할때 서로 다른 값을 도출된다..
    
        (오버로딩)
            저글링, 뮤탈, 히드라 라는 "클래스"가 있고, 각각 moveto() 라는 메서드가 잇을때.
            저글링은 뛰고 뮤탈은 날게되지만, 결국 "이동한다" 라는 개념은 같아지는 것 

            

